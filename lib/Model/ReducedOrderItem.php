<?php
/**
 * ReducedOrderItem
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 9.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bol\Retailer\Model;

use \ArrayAccess;
use \Bol\Retailer\ObjectSerializer;

/**
 * ReducedOrderItem Class Doc Comment
 *
 * @category Class
 * @description An order item.
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReducedOrderItem implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReducedOrderItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_item_id' => 'string',
        'ean' => 'string',
        'fulfilment_method' => 'string',
        'fulfilment_status' => 'string',
        'quantity' => 'int',
        'quantity_shipped' => 'int',
        'quantity_cancelled' => 'int',
        'cancellation_request' => 'bool',
        'latest_changed_date_time' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'order_item_id' => null,
        'ean' => null,
        'fulfilment_method' => null,
        'fulfilment_status' => null,
        'quantity' => 'int32',
        'quantity_shipped' => 'int32',
        'quantity_cancelled' => 'int32',
        'cancellation_request' => null,
        'latest_changed_date_time' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'order_item_id' => 'orderItemId',
        'ean' => 'ean',
        'fulfilment_method' => 'fulfilmentMethod',
        'fulfilment_status' => 'fulfilmentStatus',
        'quantity' => 'quantity',
        'quantity_shipped' => 'quantityShipped',
        'quantity_cancelled' => 'quantityCancelled',
        'cancellation_request' => 'cancellationRequest',
        'latest_changed_date_time' => 'latestChangedDateTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'order_item_id' => 'setOrderItemId',
        'ean' => 'setEan',
        'fulfilment_method' => 'setFulfilmentMethod',
        'fulfilment_status' => 'setFulfilmentStatus',
        'quantity' => 'setQuantity',
        'quantity_shipped' => 'setQuantityShipped',
        'quantity_cancelled' => 'setQuantityCancelled',
        'cancellation_request' => 'setCancellationRequest',
        'latest_changed_date_time' => 'setLatestChangedDateTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'order_item_id' => 'getOrderItemId',
        'ean' => 'getEan',
        'fulfilment_method' => 'getFulfilmentMethod',
        'fulfilment_status' => 'getFulfilmentStatus',
        'quantity' => 'getQuantity',
        'quantity_shipped' => 'getQuantityShipped',
        'quantity_cancelled' => 'getQuantityCancelled',
        'cancellation_request' => 'getCancellationRequest',
        'latest_changed_date_time' => 'getLatestChangedDateTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_item_id'] = isset($data['order_item_id']) ? $data['order_item_id'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['fulfilment_method'] = isset($data['fulfilment_method']) ? $data['fulfilment_method'] : null;
        $this->container['fulfilment_status'] = isset($data['fulfilment_status']) ? $data['fulfilment_status'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_shipped'] = isset($data['quantity_shipped']) ? $data['quantity_shipped'] : null;
        $this->container['quantity_cancelled'] = isset($data['quantity_cancelled']) ? $data['quantity_cancelled'] : null;
        $this->container['cancellation_request'] = isset($data['cancellation_request']) ? $data['cancellation_request'] : null;
        $this->container['latest_changed_date_time'] = isset($data['latest_changed_date_time']) ? $data['latest_changed_date_time'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['order_item_id'] === null) {
            $invalidProperties[] = "'order_item_id' can't be null";
        }
        if ($this->container['ean'] === null) {
            $invalidProperties[] = "'ean' can't be null";
        }
        if ($this->container['fulfilment_method'] === null) {
            $invalidProperties[] = "'fulfilment_method' can't be null";
        }
        if ($this->container['fulfilment_status'] === null) {
            $invalidProperties[] = "'fulfilment_status' can't be null";
        }
        if ($this->container['quantity'] === null) {
            $invalidProperties[] = "'quantity' can't be null";
        }
        if ($this->container['quantity_shipped'] === null) {
            $invalidProperties[] = "'quantity_shipped' can't be null";
        }
        if ($this->container['quantity_cancelled'] === null) {
            $invalidProperties[] = "'quantity_cancelled' can't be null";
        }
        if ($this->container['cancellation_request'] === null) {
            $invalidProperties[] = "'cancellation_request' can't be null";
        }
        if ($this->container['latest_changed_date_time'] === null) {
            $invalidProperties[] = "'latest_changed_date_time' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets order_item_id
     *
     * @return string
     */
    public function getOrderItemId()
    {
        return $this->container['order_item_id'];
    }

    /**
     * Sets order_item_id
     *
     * @param string $order_item_id The id for the order item. One order can have multiple order items, but the list can only take one item.
     *
     * @return $this
     */
    public function setOrderItemId($order_item_id)
    {
        $this->container['order_item_id'] = $order_item_id;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string $ean The EAN number associated with this product.
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets fulfilment_method
     *
     * @return string
     */
    public function getFulfilmentMethod()
    {
        return $this->container['fulfilment_method'];
    }

    /**
     * Sets fulfilment_method
     *
     * @param string $fulfilment_method The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     *
     * @return $this
     */
    public function setFulfilmentMethod($fulfilment_method)
    {
        $this->container['fulfilment_method'] = $fulfilment_method;

        return $this;
    }

    /**
     * Gets fulfilment_status
     *
     * @return string
     */
    public function getFulfilmentStatus()
    {
        return $this->container['fulfilment_status'];
    }

    /**
     * Sets fulfilment_status
     *
     * @param string $fulfilment_status To filter on order status. You can filter on either all orders independent from their status, open orders (excluding shipped and cancelled orders), and shipped orders.
     *
     * @return $this
     */
    public function setFulfilmentStatus($fulfilment_status)
    {
        $this->container['fulfilment_status'] = $fulfilment_status;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return int
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param int $quantity Amount of ordered products for this order item id.
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_shipped
     *
     * @return int
     */
    public function getQuantityShipped()
    {
        return $this->container['quantity_shipped'];
    }

    /**
     * Sets quantity_shipped
     *
     * @param int $quantity_shipped Amount of shipped products for this order item id.
     *
     * @return $this
     */
    public function setQuantityShipped($quantity_shipped)
    {
        $this->container['quantity_shipped'] = $quantity_shipped;

        return $this;
    }

    /**
     * Gets quantity_cancelled
     *
     * @return int
     */
    public function getQuantityCancelled()
    {
        return $this->container['quantity_cancelled'];
    }

    /**
     * Sets quantity_cancelled
     *
     * @param int $quantity_cancelled Amount of cancelled products for this order item id.
     *
     * @return $this
     */
    public function setQuantityCancelled($quantity_cancelled)
    {
        $this->container['quantity_cancelled'] = $quantity_cancelled;

        return $this;
    }

    /**
     * Gets cancellation_request
     *
     * @return bool
     */
    public function getCancellationRequest()
    {
        return $this->container['cancellation_request'];
    }

    /**
     * Sets cancellation_request
     *
     * @param bool $cancellation_request Indicates whether the order was cancelled on request of the customer before the retailer has shipped it.
     *
     * @return $this
     */
    public function setCancellationRequest($cancellation_request)
    {
        $this->container['cancellation_request'] = $cancellation_request;

        return $this;
    }

    /**
     * Gets latest_changed_date_time
     *
     * @return \DateTime
     */
    public function getLatestChangedDateTime()
    {
        return $this->container['latest_changed_date_time'];
    }

    /**
     * Sets latest_changed_date_time
     *
     * @param \DateTime $latest_changed_date_time The date and time in ISO 8601 format when the orderItem was last changed.
     *
     * @return $this
     */
    public function setLatestChangedDateTime($latest_changed_date_time)
    {
        $this->container['latest_changed_date_time'] = $latest_changed_date_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


