<?php
/**
 * RetailerRating
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 9.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bol\Retailer\Model;

use \ArrayAccess;
use \Bol\Retailer\ObjectSerializer;

/**
 * RetailerRating Class Doc Comment
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RetailerRating implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RetailerRating';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'retailer_rating' => 'double',
        'product_information_rating' => 'double',
        'delivery_time_rating' => 'double',
        'shipping_rating' => 'double',
        'service_rating' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'retailer_rating' => 'double',
        'product_information_rating' => 'double',
        'delivery_time_rating' => 'double',
        'shipping_rating' => 'double',
        'service_rating' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'retailer_rating' => 'retailerRating',
        'product_information_rating' => 'productInformationRating',
        'delivery_time_rating' => 'deliveryTimeRating',
        'shipping_rating' => 'shippingRating',
        'service_rating' => 'serviceRating'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'retailer_rating' => 'setRetailerRating',
        'product_information_rating' => 'setProductInformationRating',
        'delivery_time_rating' => 'setDeliveryTimeRating',
        'shipping_rating' => 'setShippingRating',
        'service_rating' => 'setServiceRating'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'retailer_rating' => 'getRetailerRating',
        'product_information_rating' => 'getProductInformationRating',
        'delivery_time_rating' => 'getDeliveryTimeRating',
        'shipping_rating' => 'getShippingRating',
        'service_rating' => 'getServiceRating'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['retailer_rating'] = isset($data['retailer_rating']) ? $data['retailer_rating'] : null;
        $this->container['product_information_rating'] = isset($data['product_information_rating']) ? $data['product_information_rating'] : null;
        $this->container['delivery_time_rating'] = isset($data['delivery_time_rating']) ? $data['delivery_time_rating'] : null;
        $this->container['shipping_rating'] = isset($data['shipping_rating']) ? $data['shipping_rating'] : null;
        $this->container['service_rating'] = isset($data['service_rating']) ? $data['service_rating'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['retailer_rating'] === null) {
            $invalidProperties[] = "'retailer_rating' can't be null";
        }
        if (($this->container['retailer_rating'] > 10)) {
            $invalidProperties[] = "invalid value for 'retailer_rating', must be smaller than or equal to 10.";
        }

        if (($this->container['retailer_rating'] < 1)) {
            $invalidProperties[] = "invalid value for 'retailer_rating', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['product_information_rating']) && ($this->container['product_information_rating'] > 10)) {
            $invalidProperties[] = "invalid value for 'product_information_rating', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['product_information_rating']) && ($this->container['product_information_rating'] < 1)) {
            $invalidProperties[] = "invalid value for 'product_information_rating', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['delivery_time_rating']) && ($this->container['delivery_time_rating'] > 10)) {
            $invalidProperties[] = "invalid value for 'delivery_time_rating', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['delivery_time_rating']) && ($this->container['delivery_time_rating'] < 1)) {
            $invalidProperties[] = "invalid value for 'delivery_time_rating', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['shipping_rating']) && ($this->container['shipping_rating'] > 10)) {
            $invalidProperties[] = "invalid value for 'shipping_rating', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['shipping_rating']) && ($this->container['shipping_rating'] < 1)) {
            $invalidProperties[] = "invalid value for 'shipping_rating', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['service_rating']) && ($this->container['service_rating'] > 10)) {
            $invalidProperties[] = "invalid value for 'service_rating', must be smaller than or equal to 10.";
        }

        if (!is_null($this->container['service_rating']) && ($this->container['service_rating'] < 1)) {
            $invalidProperties[] = "invalid value for 'service_rating', must be bigger than or equal to 1.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets retailer_rating
     *
     * @return double
     */
    public function getRetailerRating()
    {
        return $this->container['retailer_rating'];
    }

    /**
     * Sets retailer_rating
     *
     * @param double $retailer_rating General rating of the retailer.
     *
     * @return $this
     */
    public function setRetailerRating($retailer_rating)
    {

        if (($retailer_rating > 10)) {
            throw new \InvalidArgumentException('invalid value for $retailer_rating when calling RetailerRating., must be smaller than or equal to 10.');
        }
        if (($retailer_rating < 1)) {
            throw new \InvalidArgumentException('invalid value for $retailer_rating when calling RetailerRating., must be bigger than or equal to 1.');
        }

        $this->container['retailer_rating'] = $retailer_rating;

        return $this;
    }

    /**
     * Gets product_information_rating
     *
     * @return double
     */
    public function getProductInformationRating()
    {
        return $this->container['product_information_rating'];
    }

    /**
     * Sets product_information_rating
     *
     * @param double $product_information_rating Product rating of the retailer.
     *
     * @return $this
     */
    public function setProductInformationRating($product_information_rating)
    {

        if (!is_null($product_information_rating) && ($product_information_rating > 10)) {
            throw new \InvalidArgumentException('invalid value for $product_information_rating when calling RetailerRating., must be smaller than or equal to 10.');
        }
        if (!is_null($product_information_rating) && ($product_information_rating < 1)) {
            throw new \InvalidArgumentException('invalid value for $product_information_rating when calling RetailerRating., must be bigger than or equal to 1.');
        }

        $this->container['product_information_rating'] = $product_information_rating;

        return $this;
    }

    /**
     * Gets delivery_time_rating
     *
     * @return double
     */
    public function getDeliveryTimeRating()
    {
        return $this->container['delivery_time_rating'];
    }

    /**
     * Sets delivery_time_rating
     *
     * @param double $delivery_time_rating Delivery rating of the retailer.
     *
     * @return $this
     */
    public function setDeliveryTimeRating($delivery_time_rating)
    {

        if (!is_null($delivery_time_rating) && ($delivery_time_rating > 10)) {
            throw new \InvalidArgumentException('invalid value for $delivery_time_rating when calling RetailerRating., must be smaller than or equal to 10.');
        }
        if (!is_null($delivery_time_rating) && ($delivery_time_rating < 1)) {
            throw new \InvalidArgumentException('invalid value for $delivery_time_rating when calling RetailerRating., must be bigger than or equal to 1.');
        }

        $this->container['delivery_time_rating'] = $delivery_time_rating;

        return $this;
    }

    /**
     * Gets shipping_rating
     *
     * @return double
     */
    public function getShippingRating()
    {
        return $this->container['shipping_rating'];
    }

    /**
     * Sets shipping_rating
     *
     * @param double $shipping_rating Shipping rating of the retailer.
     *
     * @return $this
     */
    public function setShippingRating($shipping_rating)
    {

        if (!is_null($shipping_rating) && ($shipping_rating > 10)) {
            throw new \InvalidArgumentException('invalid value for $shipping_rating when calling RetailerRating., must be smaller than or equal to 10.');
        }
        if (!is_null($shipping_rating) && ($shipping_rating < 1)) {
            throw new \InvalidArgumentException('invalid value for $shipping_rating when calling RetailerRating., must be bigger than or equal to 1.');
        }

        $this->container['shipping_rating'] = $shipping_rating;

        return $this;
    }

    /**
     * Gets service_rating
     *
     * @return double
     */
    public function getServiceRating()
    {
        return $this->container['service_rating'];
    }

    /**
     * Sets service_rating
     *
     * @param double $service_rating Service rating of the retailer.
     *
     * @return $this
     */
    public function setServiceRating($service_rating)
    {

        if (!is_null($service_rating) && ($service_rating > 10)) {
            throw new \InvalidArgumentException('invalid value for $service_rating when calling RetailerRating., must be smaller than or equal to 10.');
        }
        if (!is_null($service_rating) && ($service_rating < 1)) {
            throw new \InvalidArgumentException('invalid value for $service_rating when calling RetailerRating., must be bigger than or equal to 1.');
        }

        $this->container['service_rating'] = $service_rating;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


