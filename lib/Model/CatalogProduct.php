<?php
/**
 * CatalogProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 9.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bol\Retailer\Model;

use \ArrayAccess;
use \Bol\Retailer\ObjectSerializer;

/**
 * CatalogProduct Class Doc Comment
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CatalogProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CatalogProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'published' => 'bool',
        'gpc' => '\Bol\Retailer\Model\Gpc',
        'enrichment' => '\Bol\Retailer\Model\Enrichment',
        'attributes' => '\Bol\Retailer\Model\Attributes[]',
        'parties' => '\Bol\Retailer\Model\Party[]',
        'audio_tracks' => '\Bol\Retailer\Model\AudioTracks[]',
        'series' => '\Bol\Retailer\Model\Serie[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'published' => null,
        'gpc' => null,
        'enrichment' => null,
        'attributes' => null,
        'parties' => null,
        'audio_tracks' => null,
        'series' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'published' => 'published',
        'gpc' => 'gpc',
        'enrichment' => 'enrichment',
        'attributes' => 'attributes',
        'parties' => 'parties',
        'audio_tracks' => 'audioTracks',
        'series' => 'series'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'published' => 'setPublished',
        'gpc' => 'setGpc',
        'enrichment' => 'setEnrichment',
        'attributes' => 'setAttributes',
        'parties' => 'setParties',
        'audio_tracks' => 'setAudioTracks',
        'series' => 'setSeries'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'published' => 'getPublished',
        'gpc' => 'getGpc',
        'enrichment' => 'getEnrichment',
        'attributes' => 'getAttributes',
        'parties' => 'getParties',
        'audio_tracks' => 'getAudioTracks',
        'series' => 'getSeries'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['published'] = isset($data['published']) ? $data['published'] : null;
        $this->container['gpc'] = isset($data['gpc']) ? $data['gpc'] : null;
        $this->container['enrichment'] = isset($data['enrichment']) ? $data['enrichment'] : null;
        $this->container['attributes'] = isset($data['attributes']) ? $data['attributes'] : null;
        $this->container['parties'] = isset($data['parties']) ? $data['parties'] : null;
        $this->container['audio_tracks'] = isset($data['audio_tracks']) ? $data['audio_tracks'] : null;
        $this->container['series'] = isset($data['series']) ? $data['series'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['published'] === null) {
            $invalidProperties[] = "'published' can't be null";
        }
        if ($this->container['gpc'] === null) {
            $invalidProperties[] = "'gpc' can't be null";
        }
        if ($this->container['attributes'] === null) {
            $invalidProperties[] = "'attributes' can't be null";
        }
        if ($this->container['parties'] === null) {
            $invalidProperties[] = "'parties' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets published
     *
     * @return bool
     */
    public function getPublished()
    {
        return $this->container['published'];
    }

    /**
     * Sets published
     *
     * @param bool $published Indicates whether the product meets the minimum requirements for publishing to the webshop.
     *
     * @return $this
     */
    public function setPublished($published)
    {
        $this->container['published'] = $published;

        return $this;
    }

    /**
     * Gets gpc
     *
     * @return \Bol\Retailer\Model\Gpc
     */
    public function getGpc()
    {
        return $this->container['gpc'];
    }

    /**
     * Sets gpc
     *
     * @param \Bol\Retailer\Model\Gpc $gpc gpc
     *
     * @return $this
     */
    public function setGpc($gpc)
    {
        $this->container['gpc'] = $gpc;

        return $this;
    }

    /**
     * Gets enrichment
     *
     * @return \Bol\Retailer\Model\Enrichment
     */
    public function getEnrichment()
    {
        return $this->container['enrichment'];
    }

    /**
     * Sets enrichment
     *
     * @param \Bol\Retailer\Model\Enrichment $enrichment enrichment
     *
     * @return $this
     */
    public function setEnrichment($enrichment)
    {
        $this->container['enrichment'] = $enrichment;

        return $this;
    }

    /**
     * Gets attributes
     *
     * @return \Bol\Retailer\Model\Attributes[]
     */
    public function getAttributes()
    {
        return $this->container['attributes'];
    }

    /**
     * Sets attributes
     *
     * @param \Bol\Retailer\Model\Attributes[] $attributes attributes
     *
     * @return $this
     */
    public function setAttributes($attributes)
    {
        $this->container['attributes'] = $attributes;

        return $this;
    }

    /**
     * Gets parties
     *
     * @return \Bol\Retailer\Model\Party[]
     */
    public function getParties()
    {
        return $this->container['parties'];
    }

    /**
     * Sets parties
     *
     * @param \Bol\Retailer\Model\Party[] $parties parties
     *
     * @return $this
     */
    public function setParties($parties)
    {
        $this->container['parties'] = $parties;

        return $this;
    }

    /**
     * Gets audio_tracks
     *
     * @return \Bol\Retailer\Model\AudioTracks[]
     */
    public function getAudioTracks()
    {
        return $this->container['audio_tracks'];
    }

    /**
     * Sets audio_tracks
     *
     * @param \Bol\Retailer\Model\AudioTracks[] $audio_tracks audio_tracks
     *
     * @return $this
     */
    public function setAudioTracks($audio_tracks)
    {
        $this->container['audio_tracks'] = $audio_tracks;

        return $this;
    }

    /**
     * Gets series
     *
     * @return \Bol\Retailer\Model\Serie[]
     */
    public function getSeries()
    {
        return $this->container['series'];
    }

    /**
     * Sets series
     *
     * @param \Bol\Retailer\Model\Serie[] $series series
     *
     * @return $this
     */
    public function setSeries($series)
    {
        $this->container['series'] = $series;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


