<?php
/**
 * UploadReportAttribute
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 9.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bol\Retailer\Model;

use \ArrayAccess;
use \Bol\Retailer\ObjectSerializer;

/**
 * UploadReportAttribute Class Doc Comment
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadReportAttribute implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UploadReportAttribute';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'values' => '\Bol\Retailer\Model\UploadReportValue[]',
        'status' => 'string',
        'sub_status' => 'string',
        'sub_status_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
        'values' => null,
        'status' => null,
        'sub_status' => null,
        'sub_status_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'values' => 'values',
        'status' => 'status',
        'sub_status' => 'subStatus',
        'sub_status_description' => 'subStatusDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'values' => 'setValues',
        'status' => 'setStatus',
        'sub_status' => 'setSubStatus',
        'sub_status_description' => 'setSubStatusDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'values' => 'getValues',
        'status' => 'getStatus',
        'sub_status' => 'getSubStatus',
        'sub_status_description' => 'getSubStatusDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_IN_PROGRESS = 'IN_PROGRESS';
    const STATUS_DECLINED = 'DECLINED';
    const STATUS_PUBLISHED = 'PUBLISHED';
    const SUB_STATUS_BLOCKED_BY_RATE_LIMITER = 'BLOCKED_BY_RATE_LIMITER';
    const SUB_STATUS_CREATED = 'CREATED';
    const SUB_STATUS_DEPRECATED = 'DEPRECATED';
    const SUB_STATUS_IDENTICAL_VALUE_AS_BEFORE = 'IDENTICAL_VALUE_AS_BEFORE';
    const SUB_STATUS_MATCH_TO_PRODUCT_FAILED = 'MATCH_TO_PRODUCT_FAILED';
    const SUB_STATUS_NOT_CHANGED = 'NOT_CHANGED';
    const SUB_STATUS_NOT_RECENT = 'NOT_RECENT';
    const SUB_STATUS_PROCESSING_STARTED = 'PROCESSING_STARTED';
    const SUB_STATUS_RECEIVED = 'RECEIVED';
    const SUB_STATUS_REJECTED = 'REJECTED';
    const SUB_STATUS_REJECTED_BY_BRAND_AUTHORITY = 'REJECTED_BY_BRAND_AUTHORITY';
    const SUB_STATUS_REJECTED_BY_LOGISTIC = 'REJECTED_BY_LOGISTIC';
    const SUB_STATUS_REJECTED_NO_DATA = 'REJECTED_NO_DATA';
    const SUB_STATUS_REJECTED_UNPROCESSABLE = 'REJECTED_UNPROCESSABLE';
    const SUB_STATUS_SELECTED = 'SELECTED';
    const SUB_STATUS_SELECTED_BY_BRAND_AUTHORITY = 'SELECTED_BY_BRAND_AUTHORITY';
    const SUB_STATUS_SELECTED_BY_LOGISTIC = 'SELECTED_BY_LOGISTIC';
    const SUB_STATUS_SELECTION_DELETED = 'SELECTION_DELETED';
    const SUB_STATUS_SELECTION_MERGED = 'SELECTION_MERGED';
    const SUB_STATUS_TIMED_OUT = 'TIMED_OUT';
    const SUB_STATUS_UPDATED = 'UPDATED';
    const SUB_STATUS_UPLOADED = 'UPLOADED';
    const SUB_STATUS_UNKNOWN = 'UNKNOWN';
    const SUB_STATUS_VALID_EAN = 'VALID_EAN';
    const SUB_STATUS_VALIDATED = 'VALIDATED';
    const SUB_STATUS_VALIDATION_FAILED = 'VALIDATION_FAILED';
    const SUB_STATUS_VALIDATION_FAILED_DISABLED_GPC_CODE = 'VALIDATION_FAILED_DISABLED_GPC_CODE';
    const SUB_STATUS_VALIDATION_FAILED_DOES_NOT_EXIST = 'VALIDATION_FAILED_DOES_NOT_EXIST';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_DATE = 'VALIDATION_FAILED_INVALID_DATE';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_EAN = 'VALIDATION_FAILED_INVALID_EAN';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_FRACTION = 'VALIDATION_FAILED_INVALID_FRACTION';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_GPC_CODE = 'VALIDATION_FAILED_INVALID_GPC_CODE';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_INTEGER = 'VALIDATION_FAILED_INVALID_INTEGER';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_ISODATE = 'VALIDATION_FAILED_INVALID_ISODATE';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_ISODATETIME = 'VALIDATION_FAILED_INVALID_ISODATETIME';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_LOV_VALUE = 'VALIDATION_FAILED_INVALID_LOV_VALUE';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_MULTIPLE_VALUES = 'VALIDATION_FAILED_INVALID_MULTIPLE_VALUES';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_NO_VALUES = 'VALIDATION_FAILED_INVALID_NO_VALUES';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_NUMBER = 'VALIDATION_FAILED_INVALID_NUMBER';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_NUMERIC_TEXT = 'VALIDATION_FAILED_INVALID_NUMERIC_TEXT';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_TEXT = 'VALIDATION_FAILED_INVALID_TEXT';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_UNIT = 'VALIDATION_FAILED_INVALID_UNIT';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_URL = 'VALIDATION_FAILED_INVALID_URL';
    const SUB_STATUS_VALIDATION_FAILED_INVALID_VALUES = 'VALIDATION_FAILED_INVALID_VALUES';
    const SUB_STATUS_VALIDATION_FAILED_NOT_ALLOWED = 'VALIDATION_FAILED_NOT_ALLOWED';
    const SUB_STATUS_VALIDATION_FAILED_UNKNOWN_BASETYPE = 'VALIDATION_FAILED_UNKNOWN_BASETYPE';
    const SUB_STATUS_WAITING_FOR_GLOBAL_ID = 'WAITING_FOR_GLOBAL_ID';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_DECLINED,
            self::STATUS_PUBLISHED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubStatusAllowableValues()
    {
        return [
            self::SUB_STATUS_BLOCKED_BY_RATE_LIMITER,
            self::SUB_STATUS_CREATED,
            self::SUB_STATUS_DEPRECATED,
            self::SUB_STATUS_IDENTICAL_VALUE_AS_BEFORE,
            self::SUB_STATUS_MATCH_TO_PRODUCT_FAILED,
            self::SUB_STATUS_NOT_CHANGED,
            self::SUB_STATUS_NOT_RECENT,
            self::SUB_STATUS_PROCESSING_STARTED,
            self::SUB_STATUS_RECEIVED,
            self::SUB_STATUS_REJECTED,
            self::SUB_STATUS_REJECTED_BY_BRAND_AUTHORITY,
            self::SUB_STATUS_REJECTED_BY_LOGISTIC,
            self::SUB_STATUS_REJECTED_NO_DATA,
            self::SUB_STATUS_REJECTED_UNPROCESSABLE,
            self::SUB_STATUS_SELECTED,
            self::SUB_STATUS_SELECTED_BY_BRAND_AUTHORITY,
            self::SUB_STATUS_SELECTED_BY_LOGISTIC,
            self::SUB_STATUS_SELECTION_DELETED,
            self::SUB_STATUS_SELECTION_MERGED,
            self::SUB_STATUS_TIMED_OUT,
            self::SUB_STATUS_UPDATED,
            self::SUB_STATUS_UPLOADED,
            self::SUB_STATUS_UNKNOWN,
            self::SUB_STATUS_VALID_EAN,
            self::SUB_STATUS_VALIDATED,
            self::SUB_STATUS_VALIDATION_FAILED,
            self::SUB_STATUS_VALIDATION_FAILED_DISABLED_GPC_CODE,
            self::SUB_STATUS_VALIDATION_FAILED_DOES_NOT_EXIST,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_DATE,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_EAN,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_FRACTION,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_GPC_CODE,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_INTEGER,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_ISODATE,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_ISODATETIME,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_LOV_VALUE,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_MULTIPLE_VALUES,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_NO_VALUES,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_NUMBER,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_NUMERIC_TEXT,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_TEXT,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_UNIT,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_URL,
            self::SUB_STATUS_VALIDATION_FAILED_INVALID_VALUES,
            self::SUB_STATUS_VALIDATION_FAILED_NOT_ALLOWED,
            self::SUB_STATUS_VALIDATION_FAILED_UNKNOWN_BASETYPE,
            self::SUB_STATUS_WAITING_FOR_GLOBAL_ID,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_status'] = isset($data['sub_status']) ? $data['sub_status'] : null;
        $this->container['sub_status_description'] = isset($data['sub_status_description']) ? $data['sub_status_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['values'] === null) {
            $invalidProperties[] = "'values' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubStatusAllowableValues();
        if (!is_null($this->container['sub_status']) && !in_array($this->container['sub_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sub_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id The identifier of the attribute for which the value has changed.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \Bol\Retailer\Model\UploadReportValue[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \Bol\Retailer\Model\UploadReportValue[] $values values
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The processing state of the submitted attribute.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_status
     *
     * @return string
     */
    public function getSubStatus()
    {
        return $this->container['sub_status'];
    }

    /**
     * Sets sub_status
     *
     * @param string $sub_status The reason code explaining why the value was rejected.
     *
     * @return $this
     */
    public function setSubStatus($sub_status)
    {
        $allowedValues = $this->getSubStatusAllowableValues();
        if (!is_null($sub_status) && !in_array($sub_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sub_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_status'] = $sub_status;

        return $this;
    }

    /**
     * Gets sub_status_description
     *
     * @return string
     */
    public function getSubStatusDescription()
    {
        return $this->container['sub_status_description'];
    }

    /**
     * Sets sub_status_description
     *
     * @param string $sub_status_description The reason explaining why the value was rejected.
     *
     * @return $this
     */
    public function setSubStatusDescription($sub_status_description)
    {
        $this->container['sub_status_description'] = $sub_status_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


