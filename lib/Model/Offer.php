<?php
/**
 * Offer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v10 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html)
 *
 * OpenAPI spec version: 10.x-oas3-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.60
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bol\Retailer\Model;

use \ArrayAccess;
use \Bol\Retailer\ObjectSerializer;

/**
 * Offer Class Doc Comment
 *
 * @category Class
 * @description List of offers.
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Offer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Offer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'offer_id' => 'string',
        'retailer_id' => 'string',
        'country_code' => 'string',
        'best_offer' => 'bool',
        'price' => 'float',
        'fulfilment_method' => 'string',
        'condition' => 'string',
        'ultimate_order_time' => 'string',
        'min_delivery_date' => '\DateTime',
        'max_delivery_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'offer_id' => null,
        'retailer_id' => null,
        'country_code' => null,
        'best_offer' => null,
        'price' => null,
        'fulfilment_method' => null,
        'condition' => null,
        'ultimate_order_time' => null,
        'min_delivery_date' => 'date',
        'max_delivery_date' => 'date'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'offer_id' => 'offerId',
        'retailer_id' => 'retailerId',
        'country_code' => 'countryCode',
        'best_offer' => 'bestOffer',
        'price' => 'price',
        'fulfilment_method' => 'fulfilmentMethod',
        'condition' => 'condition',
        'ultimate_order_time' => 'ultimateOrderTime',
        'min_delivery_date' => 'minDeliveryDate',
        'max_delivery_date' => 'maxDeliveryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'offer_id' => 'setOfferId',
        'retailer_id' => 'setRetailerId',
        'country_code' => 'setCountryCode',
        'best_offer' => 'setBestOffer',
        'price' => 'setPrice',
        'fulfilment_method' => 'setFulfilmentMethod',
        'condition' => 'setCondition',
        'ultimate_order_time' => 'setUltimateOrderTime',
        'min_delivery_date' => 'setMinDeliveryDate',
        'max_delivery_date' => 'setMaxDeliveryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'offer_id' => 'getOfferId',
        'retailer_id' => 'getRetailerId',
        'country_code' => 'getCountryCode',
        'best_offer' => 'getBestOffer',
        'price' => 'getPrice',
        'fulfilment_method' => 'getFulfilmentMethod',
        'condition' => 'getCondition',
        'ultimate_order_time' => 'getUltimateOrderTime',
        'min_delivery_date' => 'getMinDeliveryDate',
        'max_delivery_date' => 'getMaxDeliveryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }



    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['offer_id'] = isset($data['offer_id']) ? $data['offer_id'] : null;
        $this->container['retailer_id'] = isset($data['retailer_id']) ? $data['retailer_id'] : null;
        $this->container['country_code'] = isset($data['country_code']) ? $data['country_code'] : null;
        $this->container['best_offer'] = isset($data['best_offer']) ? $data['best_offer'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['fulfilment_method'] = isset($data['fulfilment_method']) ? $data['fulfilment_method'] : null;
        $this->container['condition'] = isset($data['condition']) ? $data['condition'] : null;
        $this->container['ultimate_order_time'] = isset($data['ultimate_order_time']) ? $data['ultimate_order_time'] : null;
        $this->container['min_delivery_date'] = isset($data['min_delivery_date']) ? $data['min_delivery_date'] : null;
        $this->container['max_delivery_date'] = isset($data['max_delivery_date']) ? $data['max_delivery_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['offer_id'] === null) {
            $invalidProperties[] = "'offer_id' can't be null";
        }
        if ($this->container['retailer_id'] === null) {
            $invalidProperties[] = "'retailer_id' can't be null";
        }
        if ($this->container['country_code'] === null) {
            $invalidProperties[] = "'country_code' can't be null";
        }
        if ($this->container['best_offer'] === null) {
            $invalidProperties[] = "'best_offer' can't be null";
        }
        if ($this->container['price'] === null) {
            $invalidProperties[] = "'price' can't be null";
        }
        if ($this->container['fulfilment_method'] === null) {
            $invalidProperties[] = "'fulfilment_method' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets offer_id
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offer_id'];
    }

    /**
     * Sets offer_id
     *
     * @param string $offer_id Unique identifier for an offer.
     *
     * @return $this
     */
    public function setOfferId($offer_id)
    {
        $this->container['offer_id'] = $offer_id;

        return $this;
    }

    /**
     * Gets retailer_id
     *
     * @return string
     */
    public function getRetailerId()
    {
        return $this->container['retailer_id'];
    }

    /**
     * Sets retailer_id
     *
     * @param string $retailer_id The ID of the retailer which the offer belongs to.
     *
     * @return $this
     */
    public function setRetailerId($retailer_id)
    {
        $this->container['retailer_id'] = $retailer_id;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The country code.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets best_offer
     *
     * @return bool
     */
    public function getBestOffer()
    {
        return $this->container['best_offer'];
    }

    /**
     * Sets best_offer
     *
     * @param bool $best_offer Indicator if the offer is the best offer within the country for the requested EAN.
     *
     * @return $this
     */
    public function setBestOffer($best_offer)
    {
        $this->container['best_offer'] = $best_offer;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float $price The selling price to the customer of a single unit including VAT unless there is a discount. The price should always have two decimals precision.
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets fulfilment_method
     *
     * @return string
     */
    public function getFulfilmentMethod()
    {
        return $this->container['fulfilment_method'];
    }

    /**
     * Sets fulfilment_method
     *
     * @param string $fulfilment_method The fulfilment method. Fulfilled by the retailer (FBR) or fulfilled by bol.com (FBB).
     *
     * @return $this
     */
    public function setFulfilmentMethod($fulfilment_method)
    {
        $this->container['fulfilment_method'] = $fulfilment_method;

        return $this;
    }

    /**
     * Gets condition
     *
     * @return string
     */
    public function getCondition()
    {
        return $this->container['condition'];
    }

    /**
     * Sets condition
     *
     * @param string $condition The condition of the offered product.
     *
     * @return $this
     */
    public function setCondition($condition)
    {
        $this->container['condition'] = $condition;

        return $this;
    }

    /**
     * Gets ultimate_order_time
     *
     * @return string
     */
    public function getUltimateOrderTime()
    {
        return $this->container['ultimate_order_time'];
    }

    /**
     * Sets ultimate_order_time
     *
     * @param string $ultimate_order_time The time in ISO 8601 format when the ultimate order time on the day in order to comply to the maxDeliveryDate as a promise.
     *
     * @return $this
     */
    public function setUltimateOrderTime($ultimate_order_time)
    {
        $this->container['ultimate_order_time'] = $ultimate_order_time;

        return $this;
    }

    /**
     * Gets min_delivery_date
     *
     * @return \DateTime
     */
    public function getMinDeliveryDate()
    {
        return $this->container['min_delivery_date'];
    }

    /**
     * Sets min_delivery_date
     *
     * @param \DateTime $min_delivery_date The date at which package can be delivered to customer earliest.
     *
     * @return $this
     */
    public function setMinDeliveryDate($min_delivery_date)
    {
        $this->container['min_delivery_date'] = $min_delivery_date;

        return $this;
    }

    /**
     * Gets max_delivery_date
     *
     * @return \DateTime
     */
    public function getMaxDeliveryDate()
    {
        return $this->container['max_delivery_date'];
    }

    /**
     * Sets max_delivery_date
     *
     * @param \DateTime $max_delivery_date The date at which package can be delivered to customer latest. In case of pre-orders where a specific delivery date is not available, this field will not be present.
     *
     * @return $this
     */
    public function setMaxDeliveryDate($max_delivery_date)
    {
        $this->container['max_delivery_date'] = $max_delivery_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
