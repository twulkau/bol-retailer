<?php
/**
 * DeliveryOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v10 - Retailer API
 *
 * The bol.com API for retailers.  # Authentication Our API requires authentication via OAuth2. The detailed steps to authenticate are explained [here](https://api.bol.com/retailer/public/Retailer-API/authentication.html)   # Demo scenarios Our API specification includes examples of the responses you can expect. For more information as well as more examples, we refer you to the following resources:   - [Demo environment](https://api.bol.com/retailer/public/Retailer-API/demo/demo.html) - [Demo scenarios](https://api.bol.com/retailer/public/Retailer-API/demo/v10-index.html)
 *
 * OpenAPI spec version: 10.x-oas3-oas3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.60
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bol\Retailer\Model;

use \ArrayAccess;
use \Bol\Retailer\ObjectSerializer;

/**
 * DeliveryOption Class Doc Comment
 *
 * @category Class
 * @description A delivery option shows how and the costs of a transport for a shippable configuration
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DeliveryOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'shipping_label_offer_id' => 'string',
        'recommended' => 'bool',
        'valid_until_date' => '\DateTime',
        'transporter_code' => 'string',
        'label_type' => 'string',
        'label_display_name' => 'string',
        'label_price' => '\Bol\Retailer\Model\LabelPrice',
        'package_restrictions' => '\Bol\Retailer\Model\PackageRestrictions',
        'handover_details' => '\Bol\Retailer\Model\HandoverDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'shipping_label_offer_id' => null,
        'recommended' => null,
        'valid_until_date' => 'date',
        'transporter_code' => null,
        'label_type' => null,
        'label_display_name' => null,
        'label_price' => null,
        'package_restrictions' => null,
        'handover_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'shipping_label_offer_id' => 'shippingLabelOfferId',
        'recommended' => 'recommended',
        'valid_until_date' => 'validUntilDate',
        'transporter_code' => 'transporterCode',
        'label_type' => 'labelType',
        'label_display_name' => 'labelDisplayName',
        'label_price' => 'labelPrice',
        'package_restrictions' => 'packageRestrictions',
        'handover_details' => 'handoverDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'shipping_label_offer_id' => 'setShippingLabelOfferId',
        'recommended' => 'setRecommended',
        'valid_until_date' => 'setValidUntilDate',
        'transporter_code' => 'setTransporterCode',
        'label_type' => 'setLabelType',
        'label_display_name' => 'setLabelDisplayName',
        'label_price' => 'setLabelPrice',
        'package_restrictions' => 'setPackageRestrictions',
        'handover_details' => 'setHandoverDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'shipping_label_offer_id' => 'getShippingLabelOfferId',
        'recommended' => 'getRecommended',
        'valid_until_date' => 'getValidUntilDate',
        'transporter_code' => 'getTransporterCode',
        'label_type' => 'getLabelType',
        'label_display_name' => 'getLabelDisplayName',
        'label_price' => 'getLabelPrice',
        'package_restrictions' => 'getPackageRestrictions',
        'handover_details' => 'getHandoverDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LABEL_TYPE_PARCEL = 'PARCEL';
    const LABEL_TYPE_MAILBOX = 'MAILBOX';
    const LABEL_TYPE_MAILBOX_LIGHT = 'MAILBOX_LIGHT';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLabelTypeAllowableValues()
    {
        return [
            self::LABEL_TYPE_PARCEL,
            self::LABEL_TYPE_MAILBOX,
            self::LABEL_TYPE_MAILBOX_LIGHT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['shipping_label_offer_id'] = isset($data['shipping_label_offer_id']) ? $data['shipping_label_offer_id'] : null;
        $this->container['recommended'] = isset($data['recommended']) ? $data['recommended'] : null;
        $this->container['valid_until_date'] = isset($data['valid_until_date']) ? $data['valid_until_date'] : null;
        $this->container['transporter_code'] = isset($data['transporter_code']) ? $data['transporter_code'] : null;
        $this->container['label_type'] = isset($data['label_type']) ? $data['label_type'] : null;
        $this->container['label_display_name'] = isset($data['label_display_name']) ? $data['label_display_name'] : null;
        $this->container['label_price'] = isset($data['label_price']) ? $data['label_price'] : null;
        $this->container['package_restrictions'] = isset($data['package_restrictions']) ? $data['package_restrictions'] : null;
        $this->container['handover_details'] = isset($data['handover_details']) ? $data['handover_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['shipping_label_offer_id'] === null) {
            $invalidProperties[] = "'shipping_label_offer_id' can't be null";
        }
        if ($this->container['recommended'] === null) {
            $invalidProperties[] = "'recommended' can't be null";
        }
        if ($this->container['transporter_code'] === null) {
            $invalidProperties[] = "'transporter_code' can't be null";
        }
        if ($this->container['label_type'] === null) {
            $invalidProperties[] = "'label_type' can't be null";
        }
        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!is_null($this->container['label_type']) && !in_array($this->container['label_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'label_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['label_display_name'] === null) {
            $invalidProperties[] = "'label_display_name' can't be null";
        }
        if ($this->container['label_price'] === null) {
            $invalidProperties[] = "'label_price' can't be null";
        }
        if ($this->container['package_restrictions'] === null) {
            $invalidProperties[] = "'package_restrictions' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets shipping_label_offer_id
     *
     * @return string
     */
    public function getShippingLabelOfferId()
    {
        return $this->container['shipping_label_offer_id'];
    }

    /**
     * Sets shipping_label_offer_id
     *
     * @param string $shipping_label_offer_id Unique identifier for the shipping label offer.
     *
     * @return $this
     */
    public function setShippingLabelOfferId($shipping_label_offer_id)
    {
        $this->container['shipping_label_offer_id'] = $shipping_label_offer_id;

        return $this;
    }

    /**
     * Gets recommended
     *
     * @return bool
     */
    public function getRecommended()
    {
        return $this->container['recommended'];
    }

    /**
     * Sets recommended
     *
     * @param bool $recommended Indicates whether this delivery option is recommended to be the best option to ship your order item(s) with.
     *
     * @return $this
     */
    public function setRecommended($recommended)
    {
        $this->container['recommended'] = $recommended;

        return $this;
    }

    /**
     * Gets valid_until_date
     *
     * @return \DateTime
     */
    public function getValidUntilDate()
    {
        return $this->container['valid_until_date'];
    }

    /**
     * Sets valid_until_date
     *
     * @param \DateTime $valid_until_date The date until the delivery option (incl total price) is valid.
     *
     * @return $this
     */
    public function setValidUntilDate($valid_until_date)
    {
        $this->container['valid_until_date'] = $valid_until_date;

        return $this;
    }

    /**
     * Gets transporter_code
     *
     * @return string
     */
    public function getTransporterCode()
    {
        return $this->container['transporter_code'];
    }

    /**
     * Sets transporter_code
     *
     * @param string $transporter_code A code representing the transporter which is being used for transportation.
     *
     * @return $this
     */
    public function setTransporterCode($transporter_code)
    {
        $this->container['transporter_code'] = $transporter_code;

        return $this;
    }

    /**
     * Gets label_type
     *
     * @return string
     */
    public function getLabelType()
    {
        return $this->container['label_type'];
    }

    /**
     * Sets label_type
     *
     * @param string $label_type The type of the label, representing the way an item is being transported. MAILBOX is a mailbox package with delivery scan. MAILBOX_LIGHT is a mailbox package without delivery scan. PARCEL is a normal package.
     *
     * @return $this
     */
    public function setLabelType($label_type)
    {
        $allowedValues = $this->getLabelTypeAllowableValues();
        if (!in_array($label_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'label_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['label_type'] = $label_type;

        return $this;
    }

    /**
     * Gets label_display_name
     *
     * @return string
     */
    public function getLabelDisplayName()
    {
        return $this->container['label_display_name'];
    }

    /**
     * Sets label_display_name
     *
     * @param string $label_display_name The display name of the shipping label.
     *
     * @return $this
     */
    public function setLabelDisplayName($label_display_name)
    {
        $this->container['label_display_name'] = $label_display_name;

        return $this;
    }

    /**
     * Gets label_price
     *
     * @return \Bol\Retailer\Model\LabelPrice
     */
    public function getLabelPrice()
    {
        return $this->container['label_price'];
    }

    /**
     * Sets label_price
     *
     * @param \Bol\Retailer\Model\LabelPrice $label_price label_price
     *
     * @return $this
     */
    public function setLabelPrice($label_price)
    {
        $this->container['label_price'] = $label_price;

        return $this;
    }

    /**
     * Gets package_restrictions
     *
     * @return \Bol\Retailer\Model\PackageRestrictions
     */
    public function getPackageRestrictions()
    {
        return $this->container['package_restrictions'];
    }

    /**
     * Sets package_restrictions
     *
     * @param \Bol\Retailer\Model\PackageRestrictions $package_restrictions package_restrictions
     *
     * @return $this
     */
    public function setPackageRestrictions($package_restrictions)
    {
        $this->container['package_restrictions'] = $package_restrictions;

        return $this;
    }

    /**
     * Gets handover_details
     *
     * @return \Bol\Retailer\Model\HandoverDetails
     */
    public function getHandoverDetails()
    {
        return $this->container['handover_details'];
    }

    /**
     * Sets handover_details
     *
     * @param \Bol\Retailer\Model\HandoverDetails $handover_details handover_details
     *
     * @return $this
     */
    public function setHandoverDetails($handover_details)
    {
        $this->container['handover_details'] = $handover_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
