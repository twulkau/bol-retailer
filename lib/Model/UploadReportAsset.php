<?php
/**
 * UploadReportAsset
 *
 * PHP version 5
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * v9 - Retailer API
 *
 * The bol.com API for retailers.
 *
 * OpenAPI spec version: 9.x
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.32
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Bol\Retailer\Model;

use \ArrayAccess;
use \Bol\Retailer\ObjectSerializer;

/**
 * UploadReportAsset Class Doc Comment
 *
 * @category Class
 * @package  Bol\Retailer
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UploadReportAsset implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UploadReportAsset';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'url' => 'string',
        'labels' => 'string[]',
        'status' => 'string',
        'sub_status' => 'string',
        'sub_status_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'url' => null,
        'labels' => null,
        'status' => null,
        'sub_status' => null,
        'sub_status_description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'url' => 'url',
        'labels' => 'labels',
        'status' => 'status',
        'sub_status' => 'subStatus',
        'sub_status_description' => 'subStatusDescription'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'url' => 'setUrl',
        'labels' => 'setLabels',
        'status' => 'setStatus',
        'sub_status' => 'setSubStatus',
        'sub_status_description' => 'setSubStatusDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'url' => 'getUrl',
        'labels' => 'getLabels',
        'status' => 'getStatus',
        'sub_status' => 'getSubStatus',
        'sub_status_description' => 'getSubStatusDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const STATUS_IN_PROGRESS = 'IN_PROGRESS';
    const STATUS_DECLINED = 'DECLINED';
    const STATUS_PUBLISHED = 'PUBLISHED';
    const SUB_STATUS_DELETED = 'DELETED';
    const SUB_STATUS_DOWNLOAD_FAILED_404 = 'DOWNLOAD_FAILED_404';
    const SUB_STATUS_DOWNLOAD_FAILED_UNAUTHORIZED = 'DOWNLOAD_FAILED_UNAUTHORIZED';
    const SUB_STATUS_IMAGE_FLAGGED_AS_DUPLICATE = 'IMAGE_FLAGGED_AS_DUPLICATE';
    const SUB_STATUS_IMAGE_RATE_LIMITED = 'IMAGE_RATE_LIMITED';
    const SUB_STATUS_IMPORT_FAILED = 'IMPORT_FAILED';
    const SUB_STATUS_LABEL_UPDATED = 'LABEL_UPDATED';
    const SUB_STATUS_MATCH_TO_PRODUCT_FAILED = 'MATCH_TO_PRODUCT_FAILED';
    const SUB_STATUS_NOT_VALID_FOR_IMPORT = 'NOT_VALID_FOR_IMPORT';
    const SUB_STATUS_PUBLISHED = 'PUBLISHED';
    const SUB_STATUS_RECEIVED = 'RECEIVED';
    const SUB_STATUS_SCORED_OTHER_IMAGE_WON = 'SCORED_OTHER_IMAGE_WON';
    const SUB_STATUS_STORED = 'STORED';
    const SUB_STATUS_SUPPLIED_FLAGGED_AS_BLACKLISTED = 'SUPPLIED_FLAGGED_AS_BLACKLISTED';
    const SUB_STATUS_UNKNOWN = 'UNKNOWN';
    const SUB_STATUS_UNPUBLISHED = 'UNPUBLISHED';
    const SUB_STATUS_UNSUPPORTED_MIMETYPE = 'UNSUPPORTED_MIMETYPE';
    const SUB_STATUS_UPLOAD_CANCELLED = 'UPLOAD_CANCELLED';
    const SUB_STATUS_UPLOAD_DEADLINE_REACHED = 'UPLOAD_DEADLINE_REACHED';
    const SUB_STATUS_UPLOAD_FAILED = 'UPLOAD_FAILED';
    const SUB_STATUS_UPLOAD_REJECTED = 'UPLOAD_REJECTED';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getStatusAllowableValues()
    {
        return [
            self::STATUS_IN_PROGRESS,
            self::STATUS_DECLINED,
            self::STATUS_PUBLISHED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getSubStatusAllowableValues()
    {
        return [
            self::SUB_STATUS_DELETED,
            self::SUB_STATUS_DOWNLOAD_FAILED_404,
            self::SUB_STATUS_DOWNLOAD_FAILED_UNAUTHORIZED,
            self::SUB_STATUS_IMAGE_FLAGGED_AS_DUPLICATE,
            self::SUB_STATUS_IMAGE_RATE_LIMITED,
            self::SUB_STATUS_IMPORT_FAILED,
            self::SUB_STATUS_LABEL_UPDATED,
            self::SUB_STATUS_MATCH_TO_PRODUCT_FAILED,
            self::SUB_STATUS_NOT_VALID_FOR_IMPORT,
            self::SUB_STATUS_PUBLISHED,
            self::SUB_STATUS_RECEIVED,
            self::SUB_STATUS_SCORED_OTHER_IMAGE_WON,
            self::SUB_STATUS_STORED,
            self::SUB_STATUS_SUPPLIED_FLAGGED_AS_BLACKLISTED,
            self::SUB_STATUS_UNKNOWN,
            self::SUB_STATUS_UNPUBLISHED,
            self::SUB_STATUS_UNSUPPORTED_MIMETYPE,
            self::SUB_STATUS_UPLOAD_CANCELLED,
            self::SUB_STATUS_UPLOAD_DEADLINE_REACHED,
            self::SUB_STATUS_UPLOAD_FAILED,
            self::SUB_STATUS_UPLOAD_REJECTED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['labels'] = isset($data['labels']) ? $data['labels'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['sub_status'] = isset($data['sub_status']) ? $data['sub_status'] : null;
        $this->container['sub_status_description'] = isset($data['sub_status_description']) ? $data['sub_status_description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['url'] === null) {
            $invalidProperties[] = "'url' can't be null";
        }
        if ($this->container['labels'] === null) {
            $invalidProperties[] = "'labels' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        $allowedValues = $this->getStatusAllowableValues();
        if (!is_null($this->container['status']) && !in_array($this->container['status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getSubStatusAllowableValues();
        if (!is_null($this->container['sub_status']) && !in_array($this->container['sub_status'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'sub_status', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The URL of the asset.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets labels
     *
     * @return string[]
     */
    public function getLabels()
    {
        return $this->container['labels'];
    }

    /**
     * Sets labels
     *
     * @param string[] $labels The label(s) of the asset.
     *
     * @return $this
     */
    public function setLabels($labels)
    {
        $this->container['labels'] = $labels;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status The processing state of the submitted asset.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $allowedValues = $this->getStatusAllowableValues();
        if (!in_array($status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets sub_status
     *
     * @return string
     */
    public function getSubStatus()
    {
        return $this->container['sub_status'];
    }

    /**
     * Sets sub_status
     *
     * @param string $sub_status The reason code explaining why the value was rejected.
     *
     * @return $this
     */
    public function setSubStatus($sub_status)
    {
        $allowedValues = $this->getSubStatusAllowableValues();
        if (!is_null($sub_status) && !in_array($sub_status, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'sub_status', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['sub_status'] = $sub_status;

        return $this;
    }

    /**
     * Gets sub_status_description
     *
     * @return string
     */
    public function getSubStatusDescription()
    {
        return $this->container['sub_status_description'];
    }

    /**
     * Sets sub_status_description
     *
     * @param string $sub_status_description The reason explaining why the value was rejected.
     *
     * @return $this
     */
    public function setSubStatusDescription($sub_status_description)
    {
        $this->container['sub_status_description'] = $sub_status_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange]
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange]
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


